/** \page basicsframe Frame

Frame is the fundamental component of all UIs. A Frame is a rectangular axis-aligned area.

By default, a Frame is invisible and cannot be interacted with. For the purposes of this documentation, Frames are generally colored with Frame::BackgroundSet so that they are visible.

Here's some example Frames:

\image html framebasics_example_ref0.png

In the above image, we show exclusively non-overlapping Frames for the sake of demonstration, but Frames can also overlap.

A Frames Environment contains one pre-defined Frame known as Root, which matches the screen bounds exactly.

With the exception of Root, all Frames have exactly one parent, and any Frame may have any number of children. A Frame's children are always rendered on top of that Frame. Each Frame has a "layer" number; a frame's children are rendered in order of increasing layer, such that the topmost frame in a set is the one with the largest Layer.

\image html framebasics_layering_ref0.png

Layer numbers can be small, large, fractional, or negative. By default, all frames are created with a layer of zero.

\image html framebasics_hierarchy_ref0.png

Layer numbers are meaningful only within the scope of a single Frame's children. In the above image, the purple frame with layer 0 is located above all the other frames, despite the other frames all having a higher layer number. Purple is located above Blue because Purple is Blue's child. Blue and all of its children are located above Red and all of its children because Blue and Red are siblings and Blue's layer number is higher. Therefore, Purple, as the child of Blue, is placed above Red and all of its children, regardless of any comparisons between the layers of Blue's children and Red's children.

In programmer terms, the Frame hierarchy forms a tree, and rendering is depth-first.

The parent/child relationship does not dictate positioning or render area - a child can render well out of bounds of a parent, just as Orange is rendering outside the bounds of Red.

Frames are placed and oriented using two tools. The first is size constraints, where you can fix the width and/or height of the frame at a known value. The second is pinning, which can be used for both positioning and sizing relative to other frames.*/