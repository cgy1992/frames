/** \page cpphelloworld C++ Hello, World

Somewhere in your code, create a Frames::Environment that will fall out of scope before your rendering context is torn down. When the last reference to a Frames::Environment falls out of scope, it will automatically clean up the environment and all associated frames.

@code{.cpp}
#include <frames/environment.h>
@endcode

@code{.cpp}
Frames::EnvironmentPtr environment;
@endcode

If you can't make it fall out of scope, you can also explicitly destroy it when you want it to shut down.

@code{.cpp}
environment.reset();
@endcode

After your project's rendering context is created, initialize the environment with an appropriate renderer.

If you're using DirectX 11:

@code{.cpp}
#include <frames/configuration.h>
#include <frames/renderer_dx11.h>
@endcode

@code{.cpp}
Frames::Configuration::Local config;
// You'll need to either provide your DirectX11 device context, or create a new one for Frames.
// Frames will handle its own reference counting; you are welcome to ->Release() immediately after passing the context into Frames::RendererDX11.
config.RendererSet(Frames::RendererDX11(deviceContext));
environment = Frames::Environment::Create(config);
@endcode

Alternatively, if you're using OpenGL:

@code{.cpp}
#include <frames/configuration.h>
#include <frames/renderer_opengl.h>
@endcode

@code{.cpp}
Frames::Configuration::Local config;
config.RendererSet(Frames::RendererOpengl());
environment = Frames::Environment::Create(config);
@endcode

Add a simple frame to verify that rendering works.

@code{.cpp}
// Create a new Frame named "Square"
Frames::Frame *square = Frames::Frame::Create(environment->RootGet(), "Square");

// Set it to render in blue
square->BackgroundSet(Frames::Color(0.f, 0.f, 1.f));

// Pin it in the center of the screen
square->PinSet(Frames::CENTER, environment->RootGet(), Frames::CENTER);
@endcode

In your render loop, at the point where you want the Frames UI to be drawn, first ensure that the appropriate render target is set (this will, of course, depend on your engine.) Update the Environment's known screen size via ResizeRoot, then call Render.

@code{.cpp}
environment->ResizeRoot(screenWidth, screenHeight);
environment->Render();
@endcode

If all has gone according to plan, you'll see a blue square in the center of your screen.

\image html helloworld_hello_ref0.png

Continue on for \ref cppsetup "more setup".

*/