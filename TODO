
* Immediate todo:
  * figure out why text editing is really slow

* maybe we need to pass "this" along with all events? both to lua, and to non-lua?

* event acceptance flags

* SetEditable
* SetCursor -- obliterates selection
* SetSelection
* SetScroll

* SelectionColor?
* SelectedColor?

* Verify consistency at all points
* Rendering

* May need to figure out how internal character positioning should work

* definitely need a way to remove events *while* we're iterating over events

* Need to figure out key events, text input
* text edit field
* we'll provide some sort of "move field" and "move cursor"
* cursor might be visible or not-visible
* make this part of Text, or?
* Textfield - separate and editable
* Text needs accessors for getting locations and for backtracking locations
* lua error output

---- real stuff here

* pageup/pagedown

* guarantee order by some sort of global ID?
* Move GetParent more into Layout
* MouseHover?

* Need to queue up obliterates if that's being used in the middle of an event handler

* Lua API
  * Events
    * Figure out how the API will work
    .AddEventMove
    .RemoveEventMove
    * Figure out how to make lua events go away properly on shutdown
  * Test re-update height if the width changes and wordwrap
  * Test Obliterate
  

* Rename GetNameDebug, split into GetName/GetNameFull
* where is my warning
* may need to improve error output

* NaCl

* SetAlpha
* pushstring -> pushliteral

* Lua API advanced
  * Optionally tag frames with filename, line number
  * Optional inline documentation
  * Handle Lua environment shutdown before Frames
  * At some point we should set up something to notify Frames if Lua shuts down first

* Crop text to bounds in a way that won't look amazingly awful for barely-on-the-fringe lines
* Raw
* Flesh out frame events
  * Events that get passed down - the Bubble phase?
  * If any event does not return true, then stop, otherwise propogate the click upwards (does not occur for other events, just clicks)
* Figure out 9-slice
* Look over rift docs, verify that I have all the things

* Text distance field
  * http://www.comp.nus.edu.sg/~tants/pba.html
  * http://directtovideo.files.wordpress.com/2012/03/gdc_2012_released.pdf
  * http://www.ronaldperry.org/PCTPres.pdf
  * http://www.youtube.com/watch?v=CGZRHJvJYIg

* Unit testing

* Derive font size adjustment more precisely - binsearch, or dig into the code and see wtf is going on

* maybe text really does need to insta-refresh its bounds? :/
  * not quite sure how that's going to work
* Refresh mouse position/mouseover when the layout changes
* Optimization:
  * Propogate acceptance bits upstream
  * Propogate full bounds upstream
* Make internal-only functions a little more obvious
* Event queueing/buffering to avoid reentrancy issues
* Subpixel text rendering
* Autocorpusing
* More text stuff
  * lazier text resolving, setting text then size shouldn't result in an extra
  * truncation marker
  * truncation marker whitespace return
  * glPixelStorei should be saved?
  * font color mappings
* Internal-prefix every internal function
  * Privatize more
* Convert layout engine to ints
* Build process for cygwin/linux/windows
* texture deallocation
  * split texture into its own thing
* async loading for textures someday
* figure out how to make config cleaner
* deal with allocation properly
  * remember image loading
  * thorough testing
* crunch down on header includes
* Multithreaded rendering
  * double buffering, triple buffering
  * all sorts of queueing needed for things
* De-float everything