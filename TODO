
=== TWEAK

* really need a global assert function
* tinyformat global assert

=== INTEGRATION

* Split OGL into its own lib
  * Test OGL

* Add DX11
  * Test DX11

* Split Loaders into their own libs
  * Test

=== DOCS

* Deep docs
  * need to put a thorough description of the pin API somewhere

* Final pass

=== TESTING

* Obliterate
* Events

* Frames
  * Text is the big one here, especially everything involving editing

=== UE4

* Need some way to build with the UE4 header tool
* However, also needs hooks in the frames for that to work
* This means . . . an internal UE4-hook class, then the UE4 code itself hooks that?
* That seems ugly, but might be necessary
* Maybe some way to provide the right set of verbs to provide external APIs?
* That may be extremely difficult
  * Thoughts:
  * Obliterate is needed - last event fired before shutdown

=== BUILDING

* Simple examples
  * SDL/GL

* Figure out how to document Delegate

* Official release?

=== TWEAK

* SRGB? that's a crazy idea, buuuut

* Linux?
* Clang?
* Clang Static?

* Redesign Lua API sanely

=== PROGRESSION

* Better global register setup

* DX support

* rejigger event core to handle remove-while-trigger better

* event for focus change?
* click outside to remove focus

* frames/textures don't appear until a window gets invalidated

* Scene - coordinate system transformations
* Stage - animations
* Canvas - freeform drawing, tiled textures
* Effect - Apply a simple effect to all members
* Postprocess - record what's underneath it, mutate it in some expensive fashion
* Bounds?
  * Or are we better off allowing some sort of delegate-style Width or Height? Freeform dependencies?

* someday, consider how to do Effect/Scene/Stage/Postprocess better
  * maybe some kind of runtime decorator system

* userdata

=== DOXYBUGS

* Enum?
* flatten class list so Frames::Input::Meta shows up as Input::Meta

* Includes friends in the .hhc
* public members of private subclass is included
* overloads look stupid
* get rid of class hierarchy

=== POLISH PASSES BELOW

* NaCl

* Raw
* Figure out 9-slice (much later?)

* Doublecheck Environment event spawners to make sure they're Obliterate-safe

* Call semantics:
  * Any Layout function can be called from an event handler at any time
  * Environment functions may not be called from event handlers
  * Doublecheck these in debug mode? Global event locks wouldn't be tricky

* Text distance field
  * http://www.comp.nus.edu.sg/~tants/pba.html
  * http://directtovideo.files.wordpress.com/2012/03/gdc_2012_released.pdf
  * http://www.ronaldperry.org/PCTPres.pdf
  * http://www.youtube.com/watch?v=CGZRHJvJYIg

* MouseHover?

* Unit testing

* Derive font size adjustment more precisely - binsearch, or dig into the code and see wtf is going on

* Lua API advanced
  * Optional inline documentation
  * At some point we should set up something to notify Frames if Lua shuts down first

* pageup/pagedown for textfields
* Refresh mouse position/mouseover when the layout changes
* Optimization:
  * Propogate acceptance bits upstream
  * Propogate full bounds upstream
* Event queueing/buffering to avoid reentrancy issues
* Subpixel text rendering
* Autocorpusing
* More text stuff
  * lazier text resolving, setting text then size shouldn't result in an extra
  * truncation marker
  * truncation marker whitespace return
  * glPixelStorei should be saved?
  * font color mappings
* Convert layout engine to ints
* Build process for cygwin/linux/windows
* texture deallocation
  * split texture into its own thing
* async loading for textures someday
* deal with allocation properly
  * remember image loading
  * thorough testing
* crunch down on header includes
* Multithreaded rendering
  * double buffering, triple buffering
  * all sorts of queueing needed for things
* De-float everything