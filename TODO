
* Immediate todo:
  X Test rendering again
  X Test moving offset
  X Make the text cropping work better
    X also with cursor
  X Render cursor
    X Render
    X Test movement
  X Cursor relative to top of line, not top of character
    X GetCharacterPosition is sort of doing the wrong thing
    X Both in cursor placement and in scrolltocursor
  X Render selection
  X Selection color
  X Remove GetLocalCharacterPosition, clean up code that used it
  * here's our little mouse input TODO
    X Basic traversal of GetFrameUnder
    X Make sure Mask is supported properly
    X MouseMove via Glorp
    X Get MouseMove into Frames
    X Debug output of MouseMove
    X Event hook change notification
      X need a vfunc here also for efficiency
    * Lua integration
      X Lua needs a way to add an event
      * Lua needs a way to remove an event
      * Lua needs a way for the lua-side components to be cleaned up on frame destruction
      * Lua needs a way for the c++-side components to be cleaned up on lua destruction
      * So, let's make three new tables, Frames_fev, Frames_rfev, and Frames_cfev. fev gives a lookup from ID to handler, rfev gives a lookup from handler to ID, cfev gives a lookup from ID to count.
      * If we add a handler that hasn't already been added, we insert it
      * If we add a handler that's already been added, we just tag increment it and add the functor
      * If we remove a handler, we decrement it in the lookups, and clear all the elements if needed.
      * Handler: We have a multimap of Lua handlers in each class. We create a new one and link it to the event DB.
      * When a class is obliterated and the Lua handlers are destroyed, we do our cleanup (just like removal)
      * When the Lua environment is shut down, we what?
      * Keep a linked list of events so we can traverse and kill them?
      * For now, just run over all frames and clear out the linkages
      * We need a lookup from environment to real environment - Frames_env?
    * Deal with obliteration of mouseover'ed frame
      * test this
    * make "remove" a little more controllable
  * Start worrying about mouse input
    * concepts
      * bubbling
      * preventdefault
      * stoppropogation
      * event transparency?
      * how does this integrate with c++
  * change intptr_t to a typedef
  * Cursor placement
  * Selection
  * Start worrying about keyboard input
    * Focus:
      * Make cursor go away
      * Remove ScrollToCursor
  * Editing
  * Editing modifiers

* maybe we need to pass "this" along with all events?
  

* SetEditable
* SetCursor -- obliterates selection
* SetSelection
* SetScroll

* SelectionColor?
* SelectedColor?

* Verify consistency at all points
* Rendering

* May need to figure out how internal character positioning should work


* Need to figure out key events, text input
* text edit field
* we'll provide some sort of "move field" and "move cursor"
* cursor might be visible or not-visible
* make this part of Text, or?
* Textfield - separate and editable
* Text needs accessors for getting locations and for backtracking locations

---- real stuff here

* Move GetParent more into Layout
* bubbling, need to propogate events into areas that may not have those events

* Lua API
  * Events
    * Figure out how the API will work
    .AddEventMove
    .RemoveEventMove
    * Figure out how to make lua events go away properly on shutdown
  * Test re-update height if the width changes and wordwrap
  * Test Obliterate
  

* Rename GetNameDebug, split into GetName/GetNameFull
* where is my warning
* may need to improve error output

* NaCl

* SetAlpha
* pushstring -> pushliteral

* Lua API advanced
  * Optionally tag frames with filename, line number
  * Optional inline documentation
  * Handle Lua environment shutdown before Frames
  * At some point we should set up something to notify Frames if Lua shuts down first

* Crop text to bounds in a way that won't look amazingly awful for barely-on-the-fringe lines
* Raw
* Flesh out frame events
  * Events that get passed down - the Bubble phase?
  * If any event does not return true, then stop, otherwise propogate the click upwards (does not occur for other events, just clicks)
* Figure out 9-slice
* Look over rift docs, verify that I have all the things

* Text distance field
  * http://www.comp.nus.edu.sg/~tants/pba.html
  * http://directtovideo.files.wordpress.com/2012/03/gdc_2012_released.pdf
  * http://www.ronaldperry.org/PCTPres.pdf
  * http://www.youtube.com/watch?v=CGZRHJvJYIg

* Unit testing

* Derive font size adjustment more precisely - binsearch, or dig into the code and see wtf is going on

* maybe text really does need to insta-refresh its bounds? :/
  * not quite sure how that's going to work
* Refresh mouse position/mouseover when the layout changes
* Optimization:
  * Propogate acceptance bits upstream
  * Propogate full bounds upstream
* Make internal-only functions a little more obvious
* Event queueing/buffering to avoid reentrancy issues
* Subpixel text rendering
* Autocorpusing
* More text stuff
  * lazier text resolving, setting text then size shouldn't result in an extra
  * truncation marker
  * truncation marker whitespace return
  * glPixelStorei should be saved?
  * font color mappings
* Internal-prefix every internal function
  * Privatize more
* Convert layout engine to ints
* Build process for cygwin/linux/windows
* texture deallocation
  * split texture into its own thing
* async loading for textures someday
* figure out how to make config cleaner
* deal with allocation properly
  * remember image loading
  * thorough testing
* crunch down on header includes
* Multithreaded rendering
  * double buffering, triple buffering
  * all sorts of queueing needed for things
* De-float everything