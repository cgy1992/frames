
* BIG STUFF TO THINK ABOUT:
  * definitely need a way to safely do horrifying things *while* we're iterating over events
    * environment-wide event lockout, queue up changes?
      * "obliterate" is pending on the global event lock?
        * how do we pend obliterate without making it a nightmare
        * just . . . don't obliterate, I guess? Then obliterate later.
      * obliterate:
        * we need another kind of event lock for locking all the things we might be touching
        * add an obliterate boolean, kill ASAP once the lock is freed
    * when we implement "list" we'll need to keep both lists in mind
    * Need to queue up obliterates if that's being used in the middle of an event handler

* EventHandle needs to be m_ prefixed

* guarantee order by some sort of global ID?
* Move GetParent more into Layout
* MouseHover?

* NaCl

* SetAlpha

* Lua API advanced
  * lua error output
  * Optionally tag frames with filename, line number
  * Optional inline documentation
  * Handle Lua environment shutdown before Frames
  * At some point we should set up something to notify Frames if Lua shuts down first

* Raw
* Figure out 9-slice
* Look over rift docs, verify that I have all the things

* all sorts of consistency checks for doing nasty things during an event handler

=== POLISH PASSES BELOW

* Text distance field
  * http://www.comp.nus.edu.sg/~tants/pba.html
  * http://directtovideo.files.wordpress.com/2012/03/gdc_2012_released.pdf
  * http://www.ronaldperry.org/PCTPres.pdf
  * http://www.youtube.com/watch?v=CGZRHJvJYIg

* Unit testing

* Derive font size adjustment more precisely - binsearch, or dig into the code and see wtf is going on

* pageup/pagedown for textfields
* at some point we need to figure out mouseover testing and key fallthroughs
* maybe text really does need to insta-refresh its bounds? :/
  * not quite sure how that's going to work
* Refresh mouse position/mouseover when the layout changes
* Optimization:
  * Propogate acceptance bits upstream
  * Propogate full bounds upstream
* Make internal-only functions a little more obvious
* Event queueing/buffering to avoid reentrancy issues
* Subpixel text rendering
* Autocorpusing
* More text stuff
  * lazier text resolving, setting text then size shouldn't result in an extra
  * truncation marker
  * truncation marker whitespace return
  * glPixelStorei should be saved?
  * font color mappings
* Internal-prefix every internal function
  * Privatize more
* Convert layout engine to ints
* Build process for cygwin/linux/windows
* texture deallocation
  * split texture into its own thing
* async loading for textures someday
* figure out how to make config cleaner
* deal with allocation properly
  * remember image loading
  * thorough testing
* crunch down on header includes
* Multithreaded rendering
  * double buffering, triple buffering
  * all sorts of queueing needed for things
* De-float everything