
* Lua API
  * Rig up fundamentals
    X Structure
    X Createframe code
    X Insert frame to environment
    * Handle cleanup on destruction
      * Lifespan:
      * Register Env to Lua
      * Unregister Env from Lua
      * Shutting down an Env automatically unregisters from all remaining Lua's
      
      * This all means that an Env has a list of valid Lua environments
      
      * Need a way to know if an env is registered
      
      * Frames_env, map from Environment* to true
      * Include this in the Create function
      
      
    
  X Functions
    X Frame
    X Text
    X Texture
    X Mask
  * Events
    * Figure out how the API will work
    .AddEventMove
    .RemoveEventMove
  * Test re-update height if the width changes and wordwrap

* Rename GetNameDebug, split into GetName/GetNameFull
* where is my warning
* may need to improve error output

* NaCl

* Lua API advanced
  * Optionally tag frames with filename, line number
  * Optional inline documentation
  * Handle Lua environment shutdown before Frames
  * At some point we should set up something to notify Frames if Lua shuts down first

* Crop to bounds in a way that won't look amazingly awful for barely-on-the-fringe lines
* Raw
* Flesh out frame events
  * Events that get passed down - the Bubble phase?
  * If any event does not return true, then stop, otherwise propogate the click upwards (does not occur for other events, just clicks)
* Figure out 9-slice
* Text entry
* Look over rift docs, verify that I have all the things

* Unit testing

* Derive font size adjustment more precisely - binsearch, or dig into the code and see wtf is going on

* Event queueing/buffering
* Subpixel text rendering
* Autocorpusing
* More text stuff
  * lazier text resolving, setting text then size shouldn't result in an extra
  * truncation marker
  * truncation marker whitespace return
  * glPixelStorei should be saved?
  * font color mappings
* Internal-prefix every internal function
  * Privatize more
* Convert layout engine to ints
* Build process for cygwin/linux/windows
* texture deallocation
  * split texture into its own thing
* async loading for textures someday
* figure out how to make config cleaner
* deal with allocation properly
  * remember image loading
  * thorough testing
* crunch down on header includes
* Multithreaded rendering
  * double buffering, triple buffering
  * all sorts of queueing needed for things
* De-float everything